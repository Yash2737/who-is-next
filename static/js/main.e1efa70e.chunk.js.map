{"version":3,"sources":["Components/Header.js","Commons/MemberItem.js","Components/Members.js","Components/NameSelector.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Navbar","color","dark","NavbarBrand","href","MemberItem","member","members","setMembers","className","data-testid","name","onClick","checked","toggleCheckbox","title","filteredMember","filter","cur","Members","useState","newMemberName","setNewMemberName","membersSelection","map","key","aria-label","onChange","event","target","value","Button","length","findIndex","a","toLowerCase","alert","newMembers","renderMembers","getRandomiseNameList","names","weight","Math","random","sort","b","nameObj","NameHistory","i","NameSelector","curMembers","setCurMembers","randomMembersList","setRandomMembersList","nameHistory","setNameHistory","display","setDisplay","useEffect","checkedNames","reduce","acc","push","newRandomList","includes","shouldShuffle","combineList","forEach","memberNameList","curMember","shift","newNameList","arr","resetHistory","App","memebrs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1efa70e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\nexport const Header = () => {\n  return (\n    <div id=\"main-header\">\n      <Navbar color=\"dark\" dark>\n        <NavbarBrand href=\"/\">Who is next</NavbarBrand>\n      </Navbar>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const MemberItem = ({ member, members, setMembers }) => {\n  const toggleCheckbox = member => {\n    member.checked = !member.checked;\n    setMembers([...members]);\n  };\n\n  return (\n    <div className=\"member-item\">\n      <div\n        className=\"member-item__checkbox-container\"\n        data-testid={`checkbox-${member.name}`}\n        onClick={() => toggleCheckbox(member)}\n      >\n        {member.checked && (\n          <div title=\"unselect\" className=\"tick\">\n            &#10003;\n          </div>\n        )}\n      </div>\n      <div className=\"member-item__name\">{member.name}</div>\n      <div\n        className=\"member-item__delete\"\n        data-testid={`delete-${member.name}`}\n        onClick={() => {\n          const filteredMember = members.filter(\n            cur => cur.name !== member.name\n          );\n          setMembers([...filteredMember]);\n        }}\n      >\n        &#10008;\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { MemberItem } from \"../Commons/MemberItem\";\nimport { Button } from \"reactstrap\";\nimport \"./Member.css\";\n\nexport const Members = ({ members, setMembers }) => {\n  const [newMemberName, setNewMemberName] = useState(\"\");\n\n  const renderMembers = () => {\n    const membersSelection = members.map(member => (\n      <MemberItem\n        key={member.name}\n        member={member}\n        members={members}\n        setMembers={setMembers}\n      />\n    ));\n\n    const addMember = () => {\n      if (\n        newMemberName.length < 2 ||\n        members.findIndex(\n          a => a.name.toLowerCase() === newMemberName.toLowerCase()\n        ) >= 0\n      ) {\n        alert(\"invalid/duplicate name\");\n        return;\n      }\n      const newMembers = [...members, { name: newMemberName, checked: true }];\n      setMembers(newMembers);\n      setNewMemberName(\"\");\n    };\n\n    return (\n      <div id=\"members\">\n        <input\n          data-testid=\"add-member\"\n          aria-label=\"members-name\"\n          onChange={event => {\n            setNewMemberName(event.target.value);\n          }}\n          value={newMemberName}\n        />\n        <Button data-testid={\"add-btn\"} color=\"primary\" onClick={addMember}>\n          Add\n        </Button>\n        <h2>Members</h2>\n        {membersSelection}\n      </div>\n    );\n  };\n\n  return <div>{renderMembers()}</div>;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"reactstrap\";\n\nexport const getRandomiseNameList = names => {\n  return names\n    .map(name => ({\n      name,\n      weight: Math.random(),\n    }))\n    .sort((a, b) => a.weight - b.weight)\n    .map(nameObj => nameObj.name);\n};\n\nexport const NameHistory = ({ names }) => {\n  return (\n    <div>\n      <p>History</p>\n      {[0, 1, 2].map(i => {\n        return (\n          !!names[i] && (\n            <p key={`${i}`}>\n              {i + 1}. {names[i]}\n            </p>\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nexport const NameSelector = ({ members }) => {\n  const noMemberDisplay = \"Add or Checked Names\";\n  const startingDisplay = \"WHO IS NEXT?\";\n\n  const [curMembers, setCurMembers] = useState([]);\n  const [randomMembersList, setRandomMembersList] = useState([]);\n  const [nameHistory, setNameHistory] = useState([]);\n  const [display, setDisplay] = useState(startingDisplay);\n\n  useEffect(() => {\n    if (curMembers !== members) {\n      setCurMembers(members);\n      const checkedNames = members.reduce((acc, cur) => {\n        if (cur && cur.checked) {\n          acc.push(cur.name);\n        }\n        return acc;\n      }, []);\n\n      let newRandomList = randomMembersList.filter(member =>\n        checkedNames.includes(member)\n      );\n\n      let shouldShuffle = false;\n      const combineList = [...randomMembersList, ...nameHistory];\n      checkedNames.forEach(name => {\n          if(!combineList.includes(name)){\n            newRandomList.push(name);\n            shouldShuffle = true;\n          }\n      });\n\n      if(shouldShuffle) {\n        newRandomList = getRandomiseNameList(newRandomList);\n\n      }\n      setRandomMembersList(newRandomList);\n    }\n  }, [members, nameHistory, randomMembersList, curMembers]);\n\n  const resetHistory = (arr = []) => setNameHistory([...arr]);\n\n  const getName = () => {\n    const memberNameList = members.filter(member => member.checked).map(member => member.name)\n\n    if (!memberNameList.length) {\n      setDisplay(noMemberDisplay);\n    } else if (randomMembersList.length) {\n      const curMember = randomMembersList.shift();\n      setDisplay(curMember);\n      setNameHistory([curMember, ...nameHistory]);\n    } else {\n      const newNameList = getRandomiseNameList(memberNameList);\n      setRandomMembersList([...newNameList]);\n      setDisplay(startingDisplay);\n      resetHistory();\n    }\n  };\n\n  return (\n    <div>\n      <div>{display}</div>\n      <Button data-testid={\"getName-btn\"} color=\"primary\" onClick={getName}>\n        getName\n      </Button>\n      <NameHistory names={nameHistory} />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./Components/Header\";\nimport { Members } from \"./Components/Members\";\nimport { NameSelector } from \"./Components/NameSelector\";\n\nfunction App() {\n  const [memebrs, setMembers] = useState([\n  ]);\n  return (\n    <div className=\"App\">\n      <Header />\n      <NameSelector members={memebrs} />\n      <Members members={memebrs} setMembers={setMembers} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
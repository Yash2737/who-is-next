{"version":3,"sources":["Components/Header.js","Commons/MemberItem.js","Components/Members.js","Components/NameSelector.js","Components/PairNames.js","Components/Pairs.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Navbar","color","dark","className","to","data-testid","MemberItem","member","members","setMembers","name","onClick","checked","toggleCheckbox","title","filteredMember","filter","cur","Members","useState","newMemberName","setNewMemberName","membersSelection","map","key","aria-label","onChange","event","target","value","Button","length","findIndex","a","toLowerCase","alert","newMembers","renderMembers","getRandomiseNameList","names","weight","Math","random","sort","b","nameObj","NameHistory","initFromStorage","JSON","parse","localStorage","getItem","NameSelector","curMembers","setCurMembers","randomMembersList","setRandomMembersList","nameHistory","setNameHistory","display","setDisplay","saveRandomMembersList","setItem","stringify","saveNameHistory","useEffect","checkedNames","reduce","acc","push","newRandomList","includes","shouldShuffle","combineList","forEach","memberNameList","curMember","shift","newNameList","arr","resetHistory","PairNames","name1","name2","Pairs","randomePairs","setRandomPairs","pairs","i","getPairs","randomMembers","App","exact","path","component","AppWithRouter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d5ddc4a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nexport const Header = () => {\n  return (\n    <div id=\"main-header\">\n      <Navbar color=\"primary\" dark>\n        <Link className=\"header-link--title\" to=\"/\">\n          WHO IS NEXT\n        </Link>\n        <Link className=\"header-link--sideText\" data-testid=\"side\" to=\"/pairs\">\n          Pairs\n        </Link>\n      </Navbar>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const MemberItem = ({ member, members, setMembers }) => {\n  const toggleCheckbox = member => {\n    member.checked = !member.checked;\n    setMembers([...members]);\n  };\n\n  return (\n    <div className=\"member-item\">\n      <div\n        className=\"member-item__checkbox-container\"\n        data-testid={`checkbox-${member.name}`}\n        onClick={() => toggleCheckbox(member)}\n      >\n        {member.checked && (\n          <div title=\"unselect\" className=\"tick\">\n            &#10003;\n          </div>\n        )}\n      </div>\n      <div className=\"member-item__name\">{member.name}</div>\n      <div\n        className=\"member-item__delete\"\n        data-testid={`delete-${member.name}`}\n        onClick={() => {\n          const filteredMember = members.filter(\n            cur => cur.name !== member.name\n          );\n          setMembers([...filteredMember]);\n        }}\n      >\n        &#10008;\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { MemberItem } from \"../Commons/MemberItem\";\nimport { Button } from \"reactstrap\";\nimport \"./Member.css\";\n\nexport const Members = ({ members, setMembers }) => {\n  const [newMemberName, setNewMemberName] = useState(\"\");\n\n  const renderMembers = () => {\n    const membersSelection = members.map(member => (\n      <MemberItem\n        key={member.name}\n        member={member}\n        members={members}\n        setMembers={setMembers}\n      />\n    ));\n\n    const addMember = () => {\n      if (\n        newMemberName.length < 2 ||\n        members.findIndex(\n          a => a.name.toLowerCase() === newMemberName.toLowerCase()\n        ) >= 0\n      ) {\n        alert(\"invalid/duplicate name\");\n        return;\n      }\n      const newMembers = [...members, { name: newMemberName, checked: true }];\n      setMembers(newMembers);\n      setNewMemberName(\"\");\n    };\n\n    return (\n      <div id=\"members\">\n        <h2>Members</h2>\n        <input\n          data-testid=\"add-member\"\n          aria-label=\"members-name\"\n          onChange={event => {\n            setNewMemberName(event.target.value);\n          }}\n          value={newMemberName}\n        />\n        <Button data-testid={\"add-btn\"} color=\"primary\" onClick={addMember}>\n          Add\n        </Button>\n        {membersSelection}\n      </div>\n    );\n  };\n\n  return <div>{renderMembers()}</div>;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./NameSelector.css\";\nexport const getRandomiseNameList = names => {\n  return names\n    .map(name => ({\n      name,\n      weight: Math.random(),\n    }))\n    .sort((a, b) => a.weight - b.weight)\n    .map(nameObj => nameObj.name);\n};\n\nexport const NameHistory = ({ names }) => {\n  return (\n    <div className={\"name-history\"}>\n      <h3 className={\"name-history__title\"}>History</h3>\n      {names.map(name => {\n        return <p key={name}>{name}</p>;\n      })}\n    </div>\n  );\n};\n\nconst Local_Random_Member_list = \"randomMemberList\";\nconst Local_History_Key = \"nameHistory\";\n\nconst initFromStorage = key => {\n  return JSON.parse(localStorage.getItem(key)) || [];\n};\n\nexport const NameSelector = ({ members }) => {\n  const noMemberDisplay = \"Add or Checked Names\";\n  const startingDisplay = \"WHO IS NEXT?\";\n\n  const [curMembers, setCurMembers] = useState([]);\n  const [randomMembersList, setRandomMembersList] = useState(\n    initFromStorage(Local_Random_Member_list)\n  );\n  const [nameHistory, setNameHistory] = useState(\n    initFromStorage(Local_History_Key)\n  );\n  const [display, setDisplay] = useState(startingDisplay);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const saveRandomMembersList = members => {\n    localStorage.setItem(Local_Random_Member_list, JSON.stringify(members));\n    setRandomMembersList(members);\n  };\n\n  const saveNameHistory = members => {\n    localStorage.setItem(Local_History_Key, JSON.stringify(members));\n    setNameHistory(members);\n  };\n\n  useEffect(() => {\n    if (curMembers !== members) {\n      setCurMembers(members);\n      const checkedNames = members.reduce((acc, cur) => {\n        if (cur && cur.checked) {\n          acc.push(cur.name);\n        }\n        return acc;\n      }, []);\n\n      let newRandomList = randomMembersList.filter(member =>\n        checkedNames.includes(member)\n      );\n\n      let shouldShuffle = false;\n      const combineList = [...randomMembersList, ...nameHistory];\n      checkedNames.forEach(name => {\n        if (!combineList.includes(name)) {\n          newRandomList.push(name);\n          shouldShuffle = true;\n        }\n      });\n\n      if (shouldShuffle) {\n        newRandomList = getRandomiseNameList(newRandomList);\n      }\n      saveRandomMembersList(newRandomList);\n    }\n  }, [\n    curMembers,\n    members,\n    nameHistory,\n    randomMembersList,\n    saveRandomMembersList,\n  ]);\n\n  const resetHistory = (arr = []) => saveNameHistory([...arr]);\n\n  const getName = () => {\n    const memberNameList = members\n      .filter(member => member.checked)\n      .map(member => member.name);\n\n    if (!memberNameList.length) {\n      setDisplay(noMemberDisplay);\n    } else if (randomMembersList.length) {\n      const curMember = randomMembersList.shift();\n      setDisplay(curMember);\n      saveRandomMembersList([...randomMembersList]);\n      saveNameHistory([curMember, ...nameHistory]);\n    } else {\n      const newNameList = getRandomiseNameList(memberNameList);\n      saveRandomMembersList([...newNameList]);\n      setDisplay(startingDisplay);\n      resetHistory();\n    }\n  };\n\n  return (\n    <div data-testid=\"name-selector\">\n      <div className={\"name-selector__display\"}>{display}</div>\n      <Button\n        className={\"name-selector__button\"}\n        data-testid={\"getName-btn\"}\n        color=\"primary\"\n        onClick={getName}>\n        getName\n      </Button>\n      <NameHistory names={nameHistory} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./PairNames.css\";\n\nexport const PairNames = ({ name1, name2 }) => {\n  return (\n    <div className={\"pair-names\"}>\n      {name1 && <p>1. {name1}</p>}\n      {name2 && <p>2. {name2}</p>}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { PairNames } from \"./PairNames\";\nimport \"./Pairs.css\";\n\nconst getPairs = members => {\n  const pairs = [];\n  for (let i = 0; i < members.length; i += 2) {\n    pairs.push(\n      <PairNames\n        key={i}\n        name1={members[i].name}\n        name2={members[i + 1] && members[i + 1].name}\n      />\n    );\n  }\n  return pairs;\n};\n\nexport const Pairs = ({ members }) => {\n  const [randomePairs, setRandomPairs] = useState([]);\n\n  const assignMembersToPairs = () => {\n    const randomMembers = members\n      .map(name => ({\n        name,\n        weight: Math.random(),\n      }))\n      .sort((a, b) => a.weight - b.weight)\n      .map(nameObj => nameObj.name);\n\n    setRandomPairs(randomMembers);\n  };\n\n  return (\n    <section>\n      {!randomePairs.length ? (\n        <div className={\"pairs__title\"}>Pair who</div>\n      ) : (\n        <div className={\"pairs__pairedNames\"}>{getPairs(randomePairs)}</div>\n      )}\n\n      <Button\n        className={\"pairs__button\"}\n        color=\"primary\"\n        onClick={assignMembersToPairs}>\n        Get Pairs\n      </Button>\n    </section>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./Components/Header\";\nimport { Members } from \"./Components/Members\";\nimport { NameSelector } from \"./Components/NameSelector\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { Pairs } from \"./Components/Pairs\";\n\nconst getMembersInitialVal = () => {\n  return JSON.parse(localStorage.getItem(\"members\")) || [];\n};\n\nfunction App() {\n  const [members, setMembers] = useState(getMembersInitialVal());\n\n  const saveMembers = (members) => {\n    setMembers(members);\n    localStorage.setItem(\"members\", JSON.stringify(members));\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className={\"name-selector\"}>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => <NameSelector members={members} />}\n          />\n          <Route path=\"/pairs\" component={() => <Pairs members={members} />} />\n          <Redirect to=\"/\" />\n        </Switch>\n        <Members members={members} setMembers={saveMembers} />\n      </div>\n    </div>\n  );\n}\n\nconst AppWithRouter = () => (\n  <div>\n    <Router>\n      <App />\n    </Router>\n  </div>\n);\n\nexport default AppWithRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}